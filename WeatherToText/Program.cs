// <copyright file="Program.cs" company="PublicDomain.com">
//     CC0 1.0 Universal (CC0 1.0) - Public Domain Dedication
//     https://creativecommons.org/publicdomain/zero/1.0/legalcode
// </copyright>
// <auto-generated />

namespace WeatherToText
{
    // Directives
    using System;
    using System.Collections.Generic;
    using System.Net;
    using System.Text.RegularExpressions;
    using ConsoleTableExt;
    using HtmlAgilityPack;

    /// <summary>
    /// Main class.
    /// </summary>
    class MainClass
    {
        /// <summary>
        /// The regex.
        /// </summary>
        private static readonly Regex regex = new Regex(@"\s+", RegexOptions.Compiled);

        /// <summary>
        /// The entry point of the program, where the program control starts and ends.
        /// </summary>
        /// <param name="args">The command-line arguments.</param>
        private static void Main(string[] args)
        {
            // Set encoding
            Console.OutputEncoding = System.Text.Encoding.UTF8;

            // Check for no args
            if (args.Length == 0)
            {
                // Advice user
                Console.WriteLine("Missing arguments.");

                // Halt program flow
                return;
            }

            // Catch errors
            try
            {
                // Text color
                Console.ForegroundColor = ConsoleColor.Yellow;

                // Configure service point manager
                ServicePointManager.Expect100Continue = true;
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls | SecurityProtocolType.Tls11;

                // Set web client
                WebClient webClient = new WebClient();

                // Get the html
                string html = webClient.DownloadString(args[0]);

                // The HTML document
                HtmlDocument htmlDocument = new HtmlDocument();

                // Load the HTML
                htmlDocument.LoadHtml(html);
                //htmlDocument.LoadHtml(File.ReadAllText("Väder Alberga - Södermanlands län_ timme för timme - Klart.se.html"));

                // TODO Declare article ID (yesterday) [Can be calculated via GMT]
                string articleId = DateTime.UtcNow.AddDays(-1).ToString("yyyy-MM-dd");

                // Check if must set article ID
                if (htmlDocument.GetElementbyId(articleId) == null)
                {
                    // Today
                    articleId = DateTime.UtcNow.ToString("yyyy-MM-dd");
                }

                // Check again if must set article ID
                if (htmlDocument.GetElementbyId(articleId) == null)
                {
                    // Tomorrow
                    articleId = DateTime.UtcNow.AddDays(1).ToString("yyyy-MM-dd");
                }

                // Set nodes
                HtmlNode article = htmlDocument.GetElementbyId(articleId);
                HtmlNode table = article.SelectSingleNode("//table[@class='hours-list']");
                HtmlNode tbody = table.SelectSingleNode("//tbody[@class='content']");

                // The table data list
                List<List<object>> tableDataList = new List<List<object>>();

                // Insert first-row substitutions
                var firstRowDataList = new List<object>();
                firstRowDataList.Add("Tid");
                firstRowDataList.Add("temp");
                firstRowDataList.Add("känns");
                firstRowDataList.Add("mm");
                firstRowDataList.Add("m/s");
                firstRowDataList.Add($"nederbörd  ");
                firstRowDataList.Add($"åska");

                // Add the data list
                tableDataList.Add(firstRowDataList);

                // Process  range
                for (int row = 1; row < tbody.SelectNodes("tr").Count; row++)
                {
                    // Insert first-row substitutions
                    var rowDataList = new List<object>();

                    // Process row
                    HtmlNode rowHtmlNode = tbody.SelectNodes("tr")[row];

                    // Iterate cells
                    if (rowHtmlNode.SelectNodes("td").Count > 0)
                    {
                        // Iterate cells
                        for (int column = 0; column < rowHtmlNode.SelectNodes("td").Count; column++)
                        {
                            // Prevent > 7 columns
                            if (column == 7)
                            {
                                // Exit for
                                break;
                            }

                            // Set cell HTML node
                            HtmlNode cellHtmlNode = rowHtmlNode.SelectNodes("td")[column];

                            // Set processed inner text
                            string cellText = regex.Replace(cellHtmlNode.InnerText.Trim(), string.Empty);

                            // Check length
                            if (cellText.Length > 0)
                            {
                                // Has length and it's within working range. Add it
                                rowDataList.Add(cellText);
                            }
                        }
                    }

                    // Check there's some data
                    if (rowDataList.Count > 0)
                    {
                        // Add the data list
                        tableDataList.Add(rowDataList);
                    }
                }

                // Check if must display
                if (tableDataList.Count > 0)
                {
                    // Set exported table 
                    string exportedTable = ConsoleTableBuilder.From(tableDataList)
                   .WithFormat(ConsoleTableBuilderFormat.Minimal)
                   .Export().ToString();

                    // Fetch first line
                    string firstLine = exportedTable.Substring(0, exportedTable.IndexOf(Environment.NewLine));

                    // Prepend line
                    Console.CursorLeft = exportedTable.IndexOf("nederbörd");
                    Console.Write("Sannolikhet");
                    Console.CursorLeft = exportedTable.IndexOf("åska");
                    Console.Write("Sannolikhet" + Environment.NewLine);

                    // Output table
                    Console.WriteLine(exportedTable);
                }
            }
            catch (Exception exception)
            {
                // Report error
                Console.WriteLine($"Error: {exception.Message}");
            }
        }
    }
}